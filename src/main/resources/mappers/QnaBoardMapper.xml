<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.enjoytrip.qnaboard.dao.QnaBoardDao">

  <resultMap type="QnaBoardView" id="boardViewMap">
    <id column="id" property="id"/>
    <result column="title" property="title"/>
    <result column="content" property="content"/>
    <result column="createtime" property="createtime"/>
    <result column="hit" property="hit"/>
    <result column="nickname" property="nickname"/>
  </resultMap>

  <resultMap type="BoardComment" id="boardCommentMap">
    <id column="id" property="id"/>
    <result column="content" property="content"/>
    <result column="createtime" property="createtime"/>
    <result column="nickname" property="nickname"/>
    <result column="qna_board_id" property="qnaBoardId"/>
  </resultMap>

  <resultMap type="BoardImage" id="boardImageMap">
    <id column="id" property="id"/>
    <result column="pathname" property="pathName"/>
    <result column="filename" property="fileName"/>
    <result column="image_name" property="imageName"/>
    <result column="size" property="size"/>
    <result column="image_type" property="imageType"/>
    <result column="image_url" property="imageUrl"/>
    <result column="qna_board_id" property="qnaBoardId"/>
    <result column="createtime" property="createtime"/>
  </resultMap>

  <insert id="insertBoard" parameterType="QnaBoardView" keyProperty="id" useGeneratedKeys="true">
    INSERT INTO qna_board (id, title, user_id, content, hit)
    VALUES (#{id}, #{title}, (select id from user where nickname = #{nickname}), #{content}, #{hit})
  </insert>

  <select id="selectLastBoard" resultType="int">
    SELECT id
    FROM qna_board
    ORDER BY id DESC LIMIT 1
  </select>

  <update id="updateBoard" parameterType="QnaBoardView">
    UPDATE qna_board
    SET title      = #{title},
        user_id    = (select id from user where user.nickname = #{nickname}),
        content    = #{content},
        hit        = #{hit},
        updatetime = now()
    WHERE id = #{id}
  </update>

  <delete id="deleteBoard" parameterType="int">
    DELETE
    FROM qna_board
    WHERE id = #{id}
  </delete>

  <select id="selectDetailById" resultMap="boardViewMap" parameterType="int">
    SELECT q.id,
           q.title,
           u.nickname,
           q.content,
           q.hit,
           date_format(q.createtime, '%Y-%m-%d %H:%i') as createtime
    FROM qna_board q
           join user u on q.user_id = u.id
    where q.id = #{id};
  </select>


  <!-- 검색 기능 -->
  <!-- Mode null or 1: 전체 검색 / Mode 2: 제목 검색 / Mode 3: 글 내용 검색 / Mode 4: 사용자 (닉네임) 검색-->
  <select id="selectListByCondition" resultMap="boardViewMap" parameterType="java.util.HashMap">
    SELECT q.id, q.title, u.nickname, q.content, q.hit,
    date_format(q.createtime, '%Y-%m-%d %H:%i') as createtime
    FROM qna_board q join user u on q.user_id = u.id
    <if test="mode == 1">
      WHERE q.title LIKE CONCAT('%', #{keyword},'%')
      OR q.content LIKE '%${keyword}%'
      OR u.nickname LIKE '%${keyword}%'
    </if>
    <if test="mode == 2">
      WHERE q.title LIKE CONCAT('%', #{keyword},'%')
    </if>
    <if test="mode == 3">
      WHERE q.content LIKE '%${keyword}%'
    </if>
    <if test="mode == 4">
      WHERE u.nickname LIKE '%${keyword}%'
    </if>
  </select>

  <select id="selectOneById" resultType="QnaBoard" parameterType="int">
    SELECT id, title, content, createtime, updatetime, hit, user_id
    from qna_board
    WHERE id = #{id}

  </select>
  <!-- 조회수 증가 -->
  <update id="updateHit" parameterType="int">
    UPDATE qna_board
    SET hit = hit + 1
    WHERE id = #{id}
  </update>

  <!-- 전체 게시글 목록 조회 (정렬은 따로 분리한 목록)-->
  <select id="selectList" resultMap="boardViewMap">
    SELECT q.id,
           q.title,
           u.nickname,
           q.content,
           q.hit,
           date_format(q.createtime, '%Y-%m-%d %H:%i') as createtime
    FROM qna_board q
           join user u on q.user_id = u.id;
  </select>

  <!-- 게시글 댓글 조회-->
  <select id="selectCommentList" resultMap="boardCommentMap" parameterType="int">
    SELECT q.id,
           q.content,
           u.nickname,
           date_format(q.createtime, '%Y-%m-%d %H:%i') as createtime
    FROM qna_comment q
           join user u on q.user_id = u.id
    WHERE q.qna_board_id = #{id}
  </select>

  <!-- 게시글 댓글 작성 -->
  <insert id="insertComment" parameterType="BoardComment" keyProperty="id" useGeneratedKeys="true">
    INSERT INTO qna_comment (id, content, user_id, qna_board_id)
    VALUES (#{id}, #{content}, (select id from user where nickname = #{nickname}), #{qnaBoardId})
  </insert>

  <!-- 게시글 댓글 수정 -->
  <update id="updateComment" parameterType="BoardComment">
    UPDATE qna_comment
    SET content      = #{content},
        user_id    = (select id from user where user.nickname = #{nickname}),
        updatetime = now()
    WHERE id = #{id} and qna_board_id = #{qnaBoardId}
  </update>

  <!-- 게시글 댓글 삭제 -->
  <delete id="deleteComment" parameterType="BoardComment">
    DELETE
    FROM qna_comment
    WHERE id = #{id} and qna_board_id = #{qnaBoardId}
  </delete>

  <!-- 게시글 이미지 업로드 -->
  <insert id="saveImage" parameterType="BoardImage" keyProperty="id">
    INSERT INTO board_image (id, pathname, filename, image_name, size, image_type, image_url, qna_board_id)
    VALUES
        (
         #{id},
         #{pathName},
         #{fileName},
         #{imageName},
         #{size},
         #{imageType},
         #{imageUrl},
         #{qnaBoardId}
        )
  </insert>

  <!-- 게시글 이미지 조회 -->
  <select id="selectImage" resultMap="boardImageMap" parameterType="int">
    SELECT image_name, image_url, pathname, filename, size, image_type,
           date_format(createtime, '%Y-%m-%d %H:%i') as createtime
    FROM board_image
    WHERE qna_board_id = #{id}
  </select>

</mapper>